
/*MAFIA GAME - KATE, REY, ELIOT, ALLIE, SASHA*/
import java.util.Scanner;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

import java.util.ArrayList;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.text.Text;
import javafx.scene.layout.FlowPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.text.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;

//import java.util.Random;

public class GameDemo {
	MediaPlayer mediaplayer;
	public static void main(String[]args) {
		Scanner kb = new Scanner(System.in);
		//ArrayList<Integer> vote = new ArrayList<Integer>(); //maybe
		ArrayList<Character> players = new ArrayList<Character>();
		//ArrayList<Character> mafia = new ArrayList<Character>(); 
		ArrayList <Integer> role = new ArrayList<Integer>();
		
		//adds numbs to arrayList
		for(int i=1; i<=8;i++) {
			role.add(i);
		}
		//intake
		//restate in chat and game
		for(int i=1; i<=8; i++) {
			System.out.print("Please enter your name: ");
			String name = kb.next();
			Character c = new Character(); //create empty
			c.setName(name);
			c.setRole(role.get(0));
			System.out.println("Please enter your password: ");
			String password = kb.next();
			c.setPassword(password);
			String currRole = c.getRole();
			role.remove(0);
			players.add(c);
		}
		
		
		Game game = new Game(players);
//add while loop for WHILE THE MAFIA QUEUE ISN"T EMPTY or while only mafia left
			//add night phase GUI
			for(int i=0; i<players.size(); i++) {
				String attempt1 = JOptionPane.showInputDialog(players.get(i).getName() + " please enter your password to take your turn.");
				//if they get their password wrong
				while(attempt1!=players.get(0).getPassword()) {
					attempt1 = JOptionPane.showInputDialog(players.get(i).getName() + " looks like you input the wrong password! Please enter your password to take your turn.");
				}
				//when mafiaNight() method is called, to count up mafia votes
				if(players.get(i).getRole().equals("Mafia")) {
					mafiaNight(players, mafiaVote);
					int count =0, most =0;
					Character mostVotes = null; boolean safe = false;
					for(int k=0; k<players.size();k++) {
						for(int j=0; j<mafiaVote.size(); j++) {
							if(mafiaVote.get(j).getName().equals(players.get(k).getName())) {
								count++;
							}
						}
						if(count>most) {
							most=count;
							mostVotes = players.get(i);
						}
						else {}
					}
					//check to make sure the person with the most votes isn't safe
					if(!mostVotes.getSafe()) {
						mostVotes.setAlive(false);
						players.remove(mostVotes);
					}
					else {
						safe = true;
					}
					mafiaVote.clear();
				}
				else if(players.get(i).getRole().equals("Doctor")) {
					doctorNight(players);
				}
				else if(players.get(i).getRole().equals("Police")) {
					policeNight(players);
				}
				//when all vote, figure out who gets murdered
				int counter=0, most2=0;
				Character mostVotes2 = null; safe = false;
				for(int k=0; k<players.size();k++) {
					for(int j=0; j<vote.size(); j++) {
						if(vote.get(j).getName().equals(players.get(k).getName())) {
							counter++;
						}
					}
					if(counter>most2) {
						most2=counter;
						mostVotes2 = players.get(k);
					}
					else {}
				}
				//check to make sure the person with the most votes isn't safe
				if(!mostVotes2.getSafe()) {
					mostVotes2.setAlive(false);
					players.remove(mostVotes2);
				}
				else {
					safe = true;
				}
				vote.clear();
			}
			//ask to play another round
			if(JOptionPane.showConfirmDialog(null, "Play again?", "Play again?", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
				keepPlaying = true;
			}
			else 
				keepPlaying = false;
		}
		System.out.println("Thanks for playing!");
	}
	//method for mafia's vote at night
	/*public static void mafiaNight(ArrayList<Character> players) {
		JFrame frame = new JFrame("Mafia - Night Phase");
		String[] options = new String[players.size()];
		
        for(int i=0; i<players.size(); i++) { // set the options to each player's name
        	options[i] = players.get(i).getName();
        }
        String nameOfVote; Character voted = null;
        nameOfVote = (String)JOptionPane.showInputDialog(frame, "Who would you like to murder tonight?", "Mafia = Night Phase", JOptionPane.QUESTION_MESSAGE, null, options, options[8]);
        for(int i=0; i<players.size(); i++) {
        	if(players.get(i).getName())
        }
	}*/
	//method for police's actions at night
	public static void policeNight(ArrayList<Character> players) {
		JFrame frame = new JFrame("Police - Night Phase");
        String[] options = new String[players.size()];
        
        for(int i=0; i<players.size(); i++) { // set the options to each player's name
        	options[i] = players.get(i).getName();
        }
        String nameOfInvest; Character investee = null;
        nameOfInvest = (String)JOptionPane.showInputDialog(frame, "Who would you like to investigate tonight?", "Police - Night Phase", JOptionPane.QUESTION_MESSAGE, null, options, options[8]); //dropdown
	    for(int i=0;i<players.size();i++) {
	    	if(players.get(i).getName().equals(nameOfInvest))
	    		investee = players.get(i);
	    }
	    
	    //sends pane saying status of investee
	    JFrame investResult = new JFrame();  
	    if(investee.getIsMafia()==false) {
	    	JOptionPane.showMessageDialog(investResult,(investee.getName()+" is a member of the mafia.")); 
	    	//System.exit(0);
	    }
	    else {
	    	JOptionPane.showMessageDialog(investResult,(investee.getName()+" is not a member of the mafia.")); 
	    	//System.exit(0);
	    }
	}
	//method for doctor's actions at night
	public static void doctorNight(ArrayList<Character> players) {
	    JFrame frame = new JFrame("Doctor - Night Phase");
        String[] options = new String[players.size()];
        
        for(int i=0; i<players.size(); i++) { // set the options to each player's name
        	options[i] = players.get(i).getName();
        }
        String nameOfSafe;
        nameOfSafe = (String)JOptionPane.showInputDialog(frame, "Who would like to protect tonight?", "Doctor - Night Phase", JOptionPane.QUESTION_MESSAGE, null, options, options[8]); //dropdown
	    for(int i=0;i<players.size();i++) {
	    	if(players.get(i).getName().equals(nameOfSafe))
	    		players.get(i).setSafe(true); //saves the one player
	    	else
	    		players.get(i).setSafe(false); //makes everyone else vulnerable
	    }
	    //System.exit(0);
	    
	    //sends pane saying that it was done
	    JFrame done = new JFrame();  
	    JOptionPane.showMessageDialog(done,(nameOfSafe+" has been protected for the night."));  //reconfirms that that player has been saved
	    
	    //System.exit(0);
	}
	//Everyone daytime voting
		public static void Voting (ArrayList<Character>players, ArrayList<Character>votes) {
		JFrame frame = new JFrame("Voting Phase");
        String[] options = new String[players.size()];
        
        for(int i=0; i<players.size(); i++) { // set the options to each player's name
        	options[i] = players.get(i).getName();
        }
        String exe; Character hang= null;
        exe = (String)JOptionPane.showInputDialog(frame, "Who do you think the town should hang?", "Voting Phase", JOptionPane.QUESTION_MESSAGE, null, options, options[0]); //dropdown
	    for(int i=0;i<players.size();i++) {
	    	if(players.get(i).getName().equals(exe))
	    		hang = players.get(i);
	    		votes.add(hang);
	    }
	    //sends pane confirms
	    JFrame thanks = new JFrame(); 
	    	JOptionPane.showMessageDialog(thanks,("You have successfully voted for "+hang.getName())); 
	    }
	public void start(Stage stage) {
		Media musicFile = new Media("file:///C:\\Users\\kaitl\\eclipse-workspace\\Mafia 2\\Mii.mp3");
		mediaplayer = new MediaPlayer(musicFile);
		mediaplayer.setAutoPlay(true);
		mediaplayer.setVolume(0.1);
		Vbox root = new Vbox();
		root.getChildren().addAll();
		
		Scene scene = new Scene(root, 500, 500);
		stage.setScene(scene);
		
		stage.show();
	}
	
}
